[{"/home/greta/Public/projet/src/index.js":"1","/home/greta/Public/projet/src/reportWebVitals.js":"2","/home/greta/Public/projet/src/App.js":"3","/home/greta/Public/projet/src/components/Random.js":"4","/home/greta/Public/projet/src/components/Medals.js":"5","/home/greta/Public/projet/src/components/President.js":"6","/home/greta/Public/projet/src/components/Leftside.jsx":"7","/home/greta/Public/projet/src/components/Center.jsx":"8","/home/greta/Public/projet/src/components/Rightside.jsx":"9","/home/greta/Public/projet/src/components/Rules.jsx":"10"},{"size":500,"mtime":1607333854016,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1607333854016,"results":"13","hashOfConfig":"12"},{"size":943,"mtime":1607934454202,"results":"14","hashOfConfig":"12"},{"size":500,"mtime":1607934454202,"results":"15","hashOfConfig":"12"},{"size":4212,"mtime":1607958029547,"results":"16","hashOfConfig":"12"},{"size":12436,"mtime":1607950820093,"results":"17","hashOfConfig":"12"},{"size":4321,"mtime":1607935020130,"results":"18","hashOfConfig":"12"},{"size":1762,"mtime":1607961326933,"results":"19","hashOfConfig":"12"},{"size":370,"mtime":1607950776426,"results":"20","hashOfConfig":"12"},{"size":2274,"mtime":1607934454202,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1mzom2t",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/greta/Public/projet/src/index.js",[],["46","47"],"/home/greta/Public/projet/src/reportWebVitals.js",[],"/home/greta/Public/projet/src/App.js",["48","49","50"],"import { useState } from 'react';\nimport './App.css';\nimport jim from './components/President';\nimport Center from './components/Center';\nimport Leftside from './components/Leftside';\nimport Rightside from './components/Rightside';\nimport medals from './components/Medals';\nimport shuffle from './components/Random'\n\nfunction App() {\n  const [pict, setPict] = useState()\n  // random number to display picts of Presidents\n  let pictPres = Math.floor(Math.random() * jim.length);\n  function startGame() {\n    // https://scotch.io/tutorials/how-to-build-a-memory-matching-game-in-javascript#toc-1-shuffing-cards\n    shuffle(medals);\n  }\n  return (\n    <div className=\"container\">\n      <Leftside name={jim[pictPres].name} indice={jim[pictPres].indice}/>\n      <Center pict={jim[pictPres].src} name={jim[pictPres].name} mandat={jim[pictPres].mandat} />\n      <Rightside indice={jim[pictPres].indice.tip2} />\n    </div>\n  );\n}\n\nexport default App;\n","/home/greta/Public/projet/src/components/Random.js",["51"],"// import President from './President'\n// Fisher - Yates Shuffle Cards\nconst Randomimg =()=> {\n  function shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n}\nexport default Randomimg\n","/home/greta/Public/projet/src/components/Medals.js",[],"/home/greta/Public/projet/src/components/President.js",[],"/home/greta/Public/projet/src/components/Leftside.jsx",["52","53","54"],"import logo from './../Logo_Republique.png';\nimport arrowright from './../assets/img/arrow_right_thin.png';\nimport crossicon from './../assets/img/x_icon.png';\nimport { useEffect, useState } from 'react';\nimport medals from './Medals';\nimport shuffle from './Random'\nconst Leftside = (props) => {\n    let [seconds, setSeconds] = useState(0);\n    let [mins, setMins] = useState(0);\n    const [stopclock, setStopclock]=useState(false);\n    let [lucky, setLucky] = useState('');\n    let [tip, setTip] = useState(false);\n    let intervalId;\n\n    // useEffect(() => {\n    //     intervalId = setInterval(() => {\n    //         setSeconds(seconds += 1);\n    //         if (seconds >= 59) {\n    //             seconds = 0;\n    //             setMins(mins += 1);\n    //         }\n\n    //     }, 1000);\n    // }, [])\n\n    // useEffect(() => {\n    //     const timer = setInterval(() => {\n    //         setSeconds(seconds + 1);\n    //     }, 1000);\n    //     // clearing interval\n    //     return () => clearInterval(timer);\n    // });\n    function TimerPres() {\n        setSeconds(0);\n        setMins(0);\n\n       intervalId = setInterval(() => {\n            setSeconds(seconds += 1);\n            if (seconds >= 59) {\n                seconds = 0;\n                setMins(mins += 1);\n            }\n            else if(stopclock){\n                setSeconds(0);\n                setMins(0);\n                return\n            }\n\n        }, 1000);\n        return() => clearInterval(intervalId)\n    }\n    function StopTimer() {\n        setSeconds(0);\n        setMins(0);\n        setStopclock(true)\n        clearInterval(intervalId)\n    }\n    // useEffect(() => {\n    //     // clearInterval(intervalId);\n    //     console.log(\"STOP\")\n    // })\n    function shuffle(array) {\n        var currentIndex = array.length, temporaryValue, randomIndex;\n\n        while (currentIndex !== 0) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n        return array;\n    }\n    function startGame() {\n        // https://scotch.io/tutorials/how-to-build-a-memory-matching-game-in-javascript#toc-1-shuffing-cards\n        shuffle(medals);\n        console.log(\"Start\")\n    }\n    return (\n        <div className=\"container__leftside\">\n            <img className=\"container__leftside-logo\" src={logo} alt=\"\" />\n            <input\n                onChange={()=>{\n                    console.log(\"Timer change\")\n                }}\n                className=\"container__leftside-clock\" type=\"text\" placeholder=\"00 : 09\" value={mins + \"  :  \" + seconds} />\n            <h1>Mr le Pr√©sident</h1>\n            <div className=\"content-btn\">\n                <div\n                    onClick={TimerPres}\n                    className=\"start\" id=\"btnstart\">Commencer</div>\n                <div\n                    onClick={startGame}\n                    className=\"reset\" id=\"reset\"><img src={crossicon} alt=\"\" /></div>\n            </div>\n            <div className=\"lucky-label\">Je tente ma chance</div>\n            <div className=\"content-btn\">\n                <input\n                    onChange={(e) => {\n                      setLucky(e.target.value);\n                    }}\n                className=\"lucky\" id=\"lucky\" type=\"text\" name=\"lucky\" minLength=\"4\" maxLength=\"40\" size=\"10\" placeholder=\"Maradona\" />\n                <div\n                onClick={(e)=>{\n                        if (lucky === props.name) {\n                            console.log(props.name);\n                        }\n                }}\n                className=\"lucky-submit\" id=\"lucky-submit\"><img src={arrowright} alt=\"\" /></div>\n            </div>\n            <div className=\"content-btn\">\n                <div className=\"tips\" id=\"btntips\">Un indice ?</div>\n                <div\n                onClick = {()=>{\n                    setTip(tip = true);\n                    if(tip === true){\n                        console.log(props.indice.tip1)\n                    }\n                }\n                }\n                className=\"tips-submit\" id=\"tips-submit\"><img src={arrowright} alt=\"\" /></div>\n            </div>\n        </div>\n    )\n}\nexport default Leftside\n","/home/greta/Public/projet/src/components/Center.jsx",["55","56","57"],"/home/greta/Public/projet/src/components/Rightside.jsx",[],"/home/greta/Public/projet/src/components/Rules.jsx",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":11,"column":10,"nodeType":"64","messageId":"65","endLine":11,"endColumn":14},{"ruleId":"62","severity":1,"message":"66","line":11,"column":16,"nodeType":"64","messageId":"65","endLine":11,"endColumn":23},{"ruleId":"62","severity":1,"message":"67","line":14,"column":12,"nodeType":"64","messageId":"65","endLine":14,"endColumn":21},{"ruleId":"62","severity":1,"message":"68","line":4,"column":12,"nodeType":"64","messageId":"65","endLine":4,"endColumn":19},{"ruleId":"62","severity":1,"message":"69","line":4,"column":10,"nodeType":"64","messageId":"65","endLine":4,"endColumn":19},{"ruleId":"62","severity":1,"message":"68","line":6,"column":8,"nodeType":"64","messageId":"65","endLine":6,"endColumn":15},{"ruleId":"62","severity":1,"message":"70","line":52,"column":14,"nodeType":"64","messageId":"65","endLine":52,"endColumn":23},{"ruleId":"62","severity":1,"message":"71","line":2,"column":8,"nodeType":"64","messageId":"65","endLine":2,"endColumn":13},{"ruleId":"62","severity":1,"message":"72","line":24,"column":11,"nodeType":"64","messageId":"65","endLine":24,"endColumn":33},{"ruleId":"62","severity":1,"message":"73","line":24,"column":35,"nodeType":"64","messageId":"65","endLine":24,"endColumn":60},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'pict' is assigned a value but never used.","Identifier","unusedVar","'setPict' is assigned a value but never used.","'startGame' is defined but never used.","'shuffle' is defined but never used.","'useEffect' is defined but never used.","'StopTimer' is defined but never used.","'Rules' is defined but never used.","'allCardsArrayofObjects' is assigned a value but never used.","'setAllCardsArrayofObjects' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]